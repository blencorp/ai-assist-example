[tools]
node = "22.12.0"  # LTS 'Jod'
python = "3.13.1"
uv = "latest"
pnpm = "latest"

[env]
# Load environment variables from .env file
_.file = ".env"

# Python optimization flags
PYTHON_CONFIGURE_OPTS = "--enable-optimizations"

# uv settings - it manages its own venvs
UV_PYTHON_PREFERENCE = "managed"
UV_COMPILE_BYTECODE = "true"
UV_PROJECT_ENVIRONMENT = ".venv"

[tasks.setup]
description = "Install all project dependencies"
run = """
echo "üì¶ Installing root dependencies..."
pnpm install

echo "üì¶ Installing frontend dependencies..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm install && cd "$MISE_PROJECT_ROOT"

echo "üì¶ Installing backend dependencies..."
cd "$MISE_PROJECT_ROOT/apps/api" && uv venv && uv pip install fastapi uvicorn[standard] pydantic pydantic-settings httpx ruff basedpyright pytest pytest-asyncio pytest-cov && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ Setup complete!"
"""

[tasks.dev]
description = "Run all development servers"
run = "pnpm dev"

[tasks."dev:web"]
description = "Run frontend development server"
run = "pnpm dev:web"

[tasks."dev:api"]
description = "Run backend development server"
run = "pnpm dev:api"

[tasks.format]
description = "Format code in both apps"
run = """
echo "üé® Formatting frontend..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm format && cd "$MISE_PROJECT_ROOT"

echo "üé® Formatting backend..."
cd "$MISE_PROJECT_ROOT/apps/api" && uv run ruff format . && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ Formatting complete!"
"""

[tasks.lint]
description = "Lint code in both apps"
run = """
echo "üîç Linting frontend..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm lint && cd "$MISE_PROJECT_ROOT"

echo "üîç Linting backend..."
cd "$MISE_PROJECT_ROOT/apps/api" && uv run ruff check . && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ Linting complete!"
"""

[tasks.typecheck]
description = "Type check code in both apps"
run = """
echo "üìù Type checking frontend..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm lint && pnpm typecheck && cd "$MISE_PROJECT_ROOT"

echo "üìù Type checking backend..."
cd "$MISE_PROJECT_ROOT/apps/api" && uv run basedpyright && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ Type checking complete!"
"""

[tasks.check]
description = "Run all code quality checks (format + lint + typecheck)"
run = """
echo "üîç Running all code quality checks..."
mise run format
mise run lint
mise run typecheck

# Additional validation
echo "üß™ Running build validation..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm build && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ All checks passed!"
"""

[tasks.fix]
description = "Format and fix auto-fixable issues"
run = """
echo "üîß Fixing frontend..."
cd "$MISE_PROJECT_ROOT/apps/web" && pnpm format && cd "$MISE_PROJECT_ROOT"

echo "üîß Fixing backend..."
cd "$MISE_PROJECT_ROOT/apps/api" && uv run ruff format . && uv run ruff check . --fix && cd "$MISE_PROJECT_ROOT"

echo "‚úÖ Auto-fixes applied!"
"""
