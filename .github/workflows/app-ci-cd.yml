name: AI Assist CI/CD
on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - '.github/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'terraform/**'
      - '.github/**'
  workflow_dispatch:

permissions:
  id-token: write # This is required for requesting the OIDC JWT
  contents: write  # This is required for actions/checkout
  actions: read
  security-events: write
  packages: read  # This is required for reading platform base Docker image
  deployments: read

env:
  GITHUB_PACKAGE_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  continuous-integration:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-gov-east-1
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.node-version'
          cache: 'pnpm'
          registry-url: 'https://npm.pkg.github.com'
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Configure npm for GitHub packages
        run: |
          echo "@department-of-veterans-affairs:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: |
          pnpm install
          cd apps/api && uv sync

      - name: Run linting and type checking
        run: pnpm check:ci

      - name: Run tests
        run: pnpm test

      - name: Build application
        run: pnpm build

      - name: Log in to GH Container registry
        if: github.event.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: github.event.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build Web Docker Image
        if: github.event.ref == 'refs/heads/main'
        id: docker_build_web
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/web/Dockerfile
          push: false
          load: true
          build-args: |
            GIT_HASH=${{ github.sha }}
          tags: |
            016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-web:${{ github.sha }}
          secrets: |
            "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
            "GITHUB_PACKAGE_TOKEN=${{ secrets.GITHUB_TOKEN }}"

      - name: Build API Docker Image
        if: github.event.ref == 'refs/heads/main'
        id: docker_build_api
        uses: docker/build-push-action@v6
        with:
          context: apps/api
          file: apps/api/Dockerfile
          push: false
          load: true
          build-args: |
            GIT_HASH=${{ github.sha }}
          tags: |
            016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }}

      - name: Verify VA Certificates in API Image
        if: github.event.ref == 'refs/heads/main'
        run: |
          echo "=== Verifying VA Certificate Installation ==="

          # Check if VA certificates are installed
          docker run --rm 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }} \
            sh -c "ls -la /etc/ssl/certs/VA-Internal-S2-*.pem" || exit 1

          # Verify certificates are in the CA bundle
          docker run --rm 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }} \
            sh -c "grep -c 'VA-Internal' /etc/ssl/certs/ca-certificates.crt && echo '✓ VA certificates found in CA bundle'" || exit 1

          # Test Python SSL configuration
          docker run --rm 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }} \
            python -c "
          import os
          import ssl
          import certifi
          print('✓ Python SSL configuration:')
          print(f'  Certifi: {certifi.where()}')
          print(f'  SSL_CERT_FILE: {os.environ.get(\"SSL_CERT_FILE\", \"Not set\")}')
          print(f'  REQUESTS_CA_BUNDLE: {os.environ.get(\"REQUESTS_CA_BUNDLE\", \"Not set\")}')
          " || exit 1

          # Test that SSL libraries don't throw certificate errors
          docker run --rm 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }} \
            python -c "
          import requests
          import ssl
          try:
              # Test that SSL context can be created without errors
              context = ssl.create_default_context()
              print('✓ SSL context created successfully')

              # Test requests library (connection may fail, but shouldn't have cert errors)
              try:
                  requests.get('https://aia.pki.example.com', timeout=2)
                  print('✓ VA PKI service accessible')
              except requests.exceptions.SSLError as e:
                  print(f'✗ SSL Certificate Error: {e}')
                  exit(1)
              except Exception:
                  print('✓ No SSL certificate errors (connection failed as expected)')
          except Exception as e:
              print(f'✗ SSL configuration error: {e}')
              exit(1)
          " || exit 1

          echo "=== VA Certificate Verification Complete ===">

      - name: Configure AWS Credentials
        if: github.event.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: ai-assist-deployment-role-pipeline
          role-duration-seconds: 1800
          role-to-assume: arn:aws:iam::123456789012:role/project/project-ai-assist-deployment-role
          aws-region: us-gov-east-1

      - name: Login to Amazon ECR
        if: github.event.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push Web Docker Image to ECR
        if: github.event.ref == 'refs/heads/main'
        run: |
          docker push 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-web:${{ github.sha }}

      - name: Push API Docker Image to ECR
        if: github.event.ref == 'refs/heads/main'
        run: |
          docker push 016134983543.dkr.ecr.us-gov-east-1.amazonaws.com/cds/ai-assist-api:${{ github.sha }}

  dev-deployment:
    name: Deploy to Dev
    if: github.event.ref == 'refs/heads/main'
    needs: [continuous-integration]
    runs-on: ubuntu-latest
    environment: dev
    env:
      AWS_REGION: us-gov-east-1
      IMAGE_TAG: ${{ github.sha }}
      ENVIRONMENT: dev
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: ai-assist-deployment-role-pipeline
          role-duration-seconds: 1800
          role-to-assume: arn:aws:iam::123456789012:role/project/project-ai-assist-deployment-role
          aws-region: us-gov-east-1

      - name: Copy web config to S3
        run: |
          echo "Copying web config to S3"
          aws s3 cp config/web-config-dev.js s3://ai-assist-example-config/web-config-dev.js

      - name: Tag and deploy web service
        run: |
          echo "Tagging web image for deployment"
          MANIFEST=$(aws ecr batch-get-image --repository-name cds/ai-assist-web --image-ids imageTag=${{ github.sha }} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name cds/ai-assist-web --image-tag dev --image-manifest "$MANIFEST" || true
          
          echo "Deploying web service"
          aws ecs update-service --cluster dev-fargate-cluster --service dev-ai-assist-web --force-new-deployment

      - name: Tag and deploy API service  
        run: |
          echo "Tagging API image for deployment"
          MANIFEST=$(aws ecr batch-get-image --repository-name cds/ai-assist-api --image-ids imageTag=${{ github.sha }} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name cds/ai-assist-api --image-tag dev --image-manifest "$MANIFEST" || true
          
          echo "Deploying API service" 
          aws ecs update-service --cluster dev-fargate-cluster --service dev-ai-assist-api --force-new-deployment

  stage-deployment:
    name: Deploy to Stage
    if: github.event.ref == 'refs/heads/main'
    needs: [dev-deployment]
    runs-on: ubuntu-latest
    environment: stage
    env:
      AWS_REGION: us-gov-east-1
      IMAGE_TAG: ${{ github.sha }}
      ENVIRONMENT: stage
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-session-name: ai-assist-deployment-role-pipeline
          role-duration-seconds: 1800
          role-to-assume: arn:aws:iam::123456789012:role/project/project-ai-assist-deployment-role
          aws-region: us-gov-east-1

      - name: Copy web config to S3
        run: |
          echo "Copying web config to S3"
          aws s3 cp config/web-config-stage.js s3://ai-assist-example-config/web-config-stage.js

      - name: Tag and deploy web service
        run: |
          echo "Tagging web image for deployment"
          MANIFEST=$(aws ecr batch-get-image --repository-name cds/ai-assist-web --image-ids imageTag=${{ github.sha }} --query 'images[].imageManifest' --output text)
          aws ecr put-image --repository-name cds/ai-assist-web --image-tag stage --image-manifest "$MANIFEST" || true
          
          echo "Deploying web service"
          aws ecs update-service --cluster stage-fargate-cluster --service stage-ai-assist-web --force-new-deployment